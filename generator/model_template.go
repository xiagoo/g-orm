package generator

import (
	"text/template"
)

var header string = `// Code generated by gorm_gen
// {{.TableName}}.go contains model for the database table [{{.DbName}}.{{.TableName}}]
package {{.PkgName}}
import (
	"database/sql"
	{{if .ImportTime}}"time"{{end}}
)
`

var modelStruct string = `
type {{.Name}} struct {
	{{range .Fields}}{{.Name}} {{.Type}} {{.Tag}}{{if .Comment}} // {{.Comment}}{{end}}
	{{end}}
}
func (obj {{.Name}}) Columns() map[string]string {
	return map[string]string{
	{{range .Fields}}"{{.ColumnName}}": "{{.Type}}",
	{{end}}
	}
}
func (obj {{.Name}}) Fields() []string {
	return []string {
		{{range .Fields}}{{if or (ne .Tag "created_at") (ne .Tag "updated_at") }}"{{.ColumnName}}",{{end}}
		{{end}}
	}
}
func (obj {{.Name}}) TableName() string {
	return "{{.TableName}}"
}
`

var objApi string = `
// Start of the {{.Name}} APIs.
func (m *Model) Insert{{.Name}}({{.LowerName}} *{{.Name}}) error {
	return m.master.Create({{.LowerName}}).Error
}

func (m *Model) Get{{.Name}}ByPK(id {{.PrimaryField.Type}}) (*{{.Name}}, error) {
	var {{.LowerName}} {{.Name}}
	err := m.slave.Where("id = ?", id).Find(&{{.LowerName}}).Error
	if err == sql.ErrNoRows {
		return nil, nil
	} else if err == nil {
		return &{{.LowerName}}, nil
	} else {
		return nil, err
	}
}
`
var (
	tmHeader *template.Template
	tmStruct *template.Template
	tmObjApi *template.Template
)

func init() {
	tmHeader = template.Must(template.New("header").Parse(header))
	tmStruct = template.Must(template.New("modelStruct").Parse(modelStruct))
	tmObjApi = template.Must(template.New("objApi").Parse(objApi))
}
